/**
 * Fleet v2 HTTP API
 * HTTP-based API for Fleet Protocol v2 serving for communication between the External Server and the end users.
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: jiri.strouhal@bringauto.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Message.h
 *
 * Physical device or program located on the car.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Message_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Message_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/DeviceId.h"
#include "CppRestOpenAPIClient/model/Payload.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class DeviceId;
class Payload;

/// <summary>
/// Physical device or program located on the car.
/// </summary>
class  Message
    : public ModelBase
{
public:
    Message();
    virtual ~Message();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Message members

    /// <summary>
    /// Unix timestamp of the message in milliseconds.
    /// </summary>
    int64_t getTimestamp() const;
    bool timestampIsSet() const;
    void unsetTimestamp();

    void setTimestamp(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DeviceId> getDeviceId() const;
    bool deviceIdIsSet() const;
    void unsetDevice_id();

    void setDeviceId(const std::shared_ptr<DeviceId>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Payload> getPayload() const;
    bool payloadIsSet() const;
    void unsetPayload();

    void setPayload(const std::shared_ptr<Payload>& value);


protected:
    int64_t m_Timestamp;
    bool m_TimestampIsSet;
    std::shared_ptr<DeviceId> m_Device_id;
    bool m_Device_idIsSet;
    std::shared_ptr<Payload> m_Payload;
    bool m_PayloadIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Message_H_ */
