/**
 * Fleet v2 HTTP API
 * HTTP-based API for Fleet Protocol v2 serving for communication between the External Server and the end users.
 *
 * The version of the OpenAPI document: 2.0.6
 * Contact: jiri.strouhal@bringauto.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Payload.h
 *
 * Payload of the message, containing message type (status or command), encoding and data.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Payload_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Payload_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/Payload_data.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Payload of the message, containing message type (status or command), encoding and data.
/// </summary>
class  Payload
    : public ModelBase
{
public:
    Payload();
    virtual ~Payload();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Payload members

    /// <summary>
    /// Type of the payload
    /// </summary>
    utility::string_t getMessageType() const;
    bool messageTypeIsSet() const;
    void unsetMessage_type();

    void setMessageType(const utility::string_t& value);

    /// <summary>
    /// Encoding of the payload
    /// </summary>
    utility::string_t getEncoding() const;
    bool encodingIsSet() const;
    void unsetEncoding();

    void setEncoding(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Payload_data> getData() const;
    bool dataIsSet() const;
    void unsetData();

    void setData(const std::shared_ptr<Payload_data>& value);


protected:
    utility::string_t m_Message_type;
    bool m_Message_typeIsSet;
    utility::string_t m_Encoding;
    bool m_EncodingIsSet;
    std::shared_ptr<Payload_data> m_Data;
    bool m_DataIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Payload_H_ */
