/**
 * Fleet v2 HTTP API
 * HTTP-based API for Fleet Protocol v2 serving for communication between the External Server and the end users.
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: jiri.strouhal@bringauto.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/DeviceId.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



DeviceId::DeviceId()
{
    m_Module_id = 0;
    m_Module_idIsSet = false;
    m_Type = 0;
    m_TypeIsSet = false;
    m_Role = utility::conversions::to_string_t("");
    m_RoleIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
}

DeviceId::~DeviceId()
{
}

void DeviceId::validate()
{
    // TODO: implement validation
}

web::json::value DeviceId::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Module_idIsSet)
    {
        val[utility::conversions::to_string_t(U("module_id"))] = ModelBase::toJson(m_Module_id);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_RoleIsSet)
    {
        val[utility::conversions::to_string_t(U("role"))] = ModelBase::toJson(m_Role);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }

    return val;
}

bool DeviceId::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("module_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("module_id")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setModuleId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModuleId);
            setModuleId(refVal_setModuleId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("role"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("role")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRole;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRole);
            setRole(refVal_setRole);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    return ok;
}

void DeviceId::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Module_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("module_id")), m_Module_id));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_RoleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("role")), m_Role));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
}

bool DeviceId::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("module_id"))))
    {
        int32_t refVal_setModuleId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("module_id"))), refVal_setModuleId );
        setModuleId(refVal_setModuleId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        int32_t refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("role"))))
    {
        utility::string_t refVal_setRole;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("role"))), refVal_setRole );
        setRole(refVal_setRole);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    return ok;
}

int32_t DeviceId::getModuleId() const
{
    return m_Module_id;
}

void DeviceId::setModuleId(int32_t value)
{
    m_Module_id = value;
    m_Module_idIsSet = true;
}

bool DeviceId::moduleIdIsSet() const
{
    return m_Module_idIsSet;
}

void DeviceId::unsetModule_id()
{
    m_Module_idIsSet = false;
}
int32_t DeviceId::getType() const
{
    return m_Type;
}

void DeviceId::setType(int32_t value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool DeviceId::typeIsSet() const
{
    return m_TypeIsSet;
}

void DeviceId::unsetType()
{
    m_TypeIsSet = false;
}
utility::string_t DeviceId::getRole() const
{
    return m_Role;
}

void DeviceId::setRole(const utility::string_t& value)
{
    m_Role = value;
    m_RoleIsSet = true;
}

bool DeviceId::roleIsSet() const
{
    return m_RoleIsSet;
}

void DeviceId::unsetRole()
{
    m_RoleIsSet = false;
}
utility::string_t DeviceId::getName() const
{
    return m_Name;
}

void DeviceId::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool DeviceId::nameIsSet() const
{
    return m_NameIsSet;
}

void DeviceId::unsetName()
{
    m_NameIsSet = false;
}
}
}
}
}


