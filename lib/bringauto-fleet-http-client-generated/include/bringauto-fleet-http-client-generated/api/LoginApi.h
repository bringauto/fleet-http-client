/**
 * Fleet v2 HTTP API
 * HTTP-based API for Fleet Protocol v2 serving for communication between the External Server and the end users.
 *
 * The version of the OpenAPI document: 2.4.0
 * Contact: jiri.strouhal@bringauto.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * LoginApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_LoginApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_LoginApi_H_



#include "bringauto-fleet-http-client-generated/ApiClient.h"
#include "bringauto-fleet-http-client-generated/ModelBase.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  LoginApi 
{
public:

    explicit LoginApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~LoginApi();

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Login using keycloak. If empty device is specified, will generate a url and device code used to authenticate a device. Tries to get token if device code is specified.
    /// </remarks>
    /// <param name="device">Device code used for assisted authentication. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<void> login(
        boost::optional<utility::string_t> device
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Callback endpoint for keycloak to receive jwt token.
    /// </remarks>
    /// <param name="state">State returned by keycloak authentication. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="sessionState">Session state returned by keycloak authentication. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="iss">Code issuer returned by keycloak authentication. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="code">Code used for jwt token generation returned by keycloak authentication. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<void> tokenGet(
        boost::optional<utility::string_t> state,
        boost::optional<utility::string_t> sessionState,
        boost::optional<utility::string_t> iss,
        boost::optional<utility::string_t> code
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Endpoint to receive jwt token from refresh token.
    /// </remarks>
    /// <param name="refreshToken">Refresh token used for jwt token generation.</param>
    pplx::task<void> tokenRefresh(
        utility::string_t refreshToken
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_LoginApi_H_ */

