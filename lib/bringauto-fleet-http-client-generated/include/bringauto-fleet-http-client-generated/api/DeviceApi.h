/**
 * Fleet v2 HTTP API
 * HTTP-based API for Fleet Protocol v2 serving for communication between the External Server and the end users.
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: jiri.strouhal@bringauto.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DeviceApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_DeviceApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_DeviceApi_H_



#include "bringauto-fleet-http-client-generated/ApiClient.h"

#include "bringauto-fleet-http-client-generated/model/Message.h"
#include <vector>
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  DeviceApi 
{
public:

    explicit DeviceApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~DeviceApi();

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Returns list of the Device Commands.
    /// </remarks>
    /// <param name="companyName">Name of the company, following a pattern ^[0-9a-z_]+$.</param>
    /// <param name="carName">Name of the Car, following a pattern ^[0-9a-z_]+$.</param>
    /// <param name="since">A Unix timestamp; if specified, the method returns all messages inclusivelly newer than the specified timestamp \\ (i.e., messages with timestamp greater than or equal to the &#39;since&#39; timestamp) (optional, default to 0)</param>
    /// <param name="wait">An empty parameter. If specified, the method waits for predefined period of time, until some data to be sent in response are available. (optional, default to false)</param>
    pplx::task<std::vector<std::shared_ptr<Message>>> listCommands(
        utility::string_t companyName,
        utility::string_t carName,
        boost::optional<int64_t> since,
        boost::optional<bool> wait
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// It returns list of the Device Statuses.
    /// </remarks>
    /// <param name="companyName">Name of the company, following a pattern ^[0-9a-z_]+$.</param>
    /// <param name="carName">Name of the Car, following a pattern ^[0-9a-z_]+$.</param>
    /// <param name="since">A Unix timestamp; if specified, the method returns all messages inclusivelly newer than the specified timestamp \\ (i.e., messages with timestamp greater than or equal to the &#39;since&#39; timestamp) (optional, default to 0)</param>
    /// <param name="wait">An empty parameter. If specified, the method waits for predefined period of time, until some data to be sent in response are available. (optional, default to false)</param>
    pplx::task<std::vector<std::shared_ptr<Message>>> listStatuses(
        utility::string_t companyName,
        utility::string_t carName,
        boost::optional<int64_t> since,
        boost::optional<bool> wait
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// It adds new device Commands.
    /// </remarks>
    /// <param name="companyName">Name of the company, following a pattern ^[0-9a-z_]+$.</param>
    /// <param name="carName">Name of the Car, following a pattern ^[0-9a-z_]+$.</param>
    /// <param name="message">Commands to be executed by the device. (optional)</param>
    pplx::task<void> sendCommands(
        utility::string_t companyName,
        utility::string_t carName,
        boost::optional<std::vector<std::shared_ptr<Message>>> message
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Add statuses received from the Device.
    /// </remarks>
    /// <param name="companyName">Name of the company, following a pattern ^[0-9a-z_]+$.</param>
    /// <param name="carName">Name of the Car, following a pattern ^[0-9a-z_]+$.</param>
    /// <param name="message">Statuses to be send by the device. (optional)</param>
    pplx::task<void> sendStatuses(
        utility::string_t companyName,
        utility::string_t carName,
        boost::optional<std::vector<std::shared_ptr<Message>>> message
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_DeviceApi_H_ */

