/**
 * Fleet v2 HTTP API
 * HTTP-based API for Fleet Protocol v2 serving for communication between the External Server and the end users.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jiri.strouhal@bringauto.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.1.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Payload.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Payload::Payload()
{
    m_Message_type = utility::conversions::to_string_t("");
    m_Message_typeIsSet = false;
    m_Encoding = utility::conversions::to_string_t("");
    m_EncodingIsSet = false;
    m_DataIsSet = false;
}

Payload::~Payload()
{
}

void Payload::validate()
{
    // TODO: implement validation
}

web::json::value Payload::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Message_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("message_type"))] = ModelBase::toJson(m_Message_type);
    }
    if(m_EncodingIsSet)
    {
        val[utility::conversions::to_string_t(U("encoding"))] = ModelBase::toJson(m_Encoding);
    }
    if(m_DataIsSet)
    {
        val[utility::conversions::to_string_t(U("data"))] = ModelBase::toJson(m_Data);
    }

    return val;
}

bool Payload::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("message_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("message_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMessageType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMessageType);
            setMessageType(refVal_setMessageType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("encoding"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("encoding")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEncoding;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEncoding);
            setEncoding(refVal_setEncoding);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("data"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("data")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Payload_data> refVal_setData;
            ok &= ModelBase::fromJson(fieldValue, refVal_setData);
            setData(refVal_setData);
        }
    }
    return ok;
}

void Payload::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Message_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("message_type")), m_Message_type));
    }
    if(m_EncodingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("encoding")), m_Encoding));
    }
    if(m_DataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("data")), m_Data));
    }
}

bool Payload::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("message_type"))))
    {
        utility::string_t refVal_setMessageType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("message_type"))), refVal_setMessageType );
        setMessageType(refVal_setMessageType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("encoding"))))
    {
        utility::string_t refVal_setEncoding;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("encoding"))), refVal_setEncoding );
        setEncoding(refVal_setEncoding);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("data"))))
    {
        std::shared_ptr<Payload_data> refVal_setData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("data"))), refVal_setData );
        setData(refVal_setData);
    }
    return ok;
}

utility::string_t Payload::getMessageType() const
{
    return m_Message_type;
}

void Payload::setMessageType(const utility::string_t& value)
{
    m_Message_type = value;
    m_Message_typeIsSet = true;
}

bool Payload::messageTypeIsSet() const
{
    return m_Message_typeIsSet;
}

void Payload::unsetMessage_type()
{
    m_Message_typeIsSet = false;
}
utility::string_t Payload::getEncoding() const
{
    return m_Encoding;
}

void Payload::setEncoding(const utility::string_t& value)
{
    m_Encoding = value;
    m_EncodingIsSet = true;
}

bool Payload::encodingIsSet() const
{
    return m_EncodingIsSet;
}

void Payload::unsetEncoding()
{
    m_EncodingIsSet = false;
}
std::shared_ptr<Payload_data> Payload::getData() const
{
    return m_Data;
}

void Payload::setData(const std::shared_ptr<Payload_data>& value)
{
    m_Data = value;
    m_DataIsSet = true;
}

bool Payload::dataIsSet() const
{
    return m_DataIsSet;
}

void Payload::unsetData()
{
    m_DataIsSet = false;
}
}
}
}
}


